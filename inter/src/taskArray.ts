export interface ITasks {
  theme: string;
  question: string;
  answer: string;
}
const arrayTasks: ITasks[] = [
  {
    theme: "HTML/CSS",
    question:
      "Семантическая верстка (основные теги: header, nav, main, article, section, aside, footer).",
    answer:
      "Подход к верстке , при котором мы используем теги с четким значением , также повышает СЕО , поднимая сайт в поиске выше сайтов , без семантики",
  },
  {
    theme: "HTML/CSS",
    question: "HTML формы (основные элементы input, textarea, select, button)",
    answer:
      "Это элементы с помощью которых мы можем отправить какую-либо информацию на сервер",
  },
  {
    theme: "HTML/CSS",
    question:
      "CSS Селекторы (по тегу, классу, id, атрибуту, псевдоклассы :hover, :focus). Специфичность",
    answer:
      "Это шаблоны по которым мы можем выбирать html элементы и применять к ним стили , спецефичность это порядок по которому стили будут применться",
  },
  {
    theme: "HTML/CSS",
    question: "Box Model",
    answer:
      "Это порядок правил , по которому мы определяем как будут высчитываться размеры блока",
  },
  {
    theme: "HTML/CSS",
    question: "Основы позиционирования",
    answer:
      "В css есть свойство position , по которому мы можем позиционировать элемент на странице",
  },
  {
    theme: "HTML/CSS",
    question: "Flexbox",
    answer: "Некая модель позиционирования внутри элемента",
  },
  {
    theme: "HTML/CSS",
    question: "Grid",
    answer:
      "Вид разметки, в котором элементы на сайте расположены в виде таблицы",
  },
  {
    theme: "HTML/CSS",
    question: "Базовая адаптивность",
    answer:
      "Адаптировать приложение можно с помощью медиа-запросов(на определенной ширине изменять стили), либо же задавать резиновые еденицы измерения",
  },
  {
    theme: "React",
    question: "Что такое React? Virtual DOM. JSX",
    answer:
      "React - библиотека для создания пользовательских интерфейсов. Virtual DOM - облегченная версия обычного дом , которая позволяет обновлять компоненты или элменты без перерендера всей страницы. JSX - это когда мы можем писать разметку внутри js кода",
  },
  {
    theme: "React",
    question: "Компоненты (функциональные), Props.",
    answer:
      "Компоненты - это куски кода , которые представляют собой части веб-страницы , построенные с помощью функций js и возвращающие элементы React.Props - данные которые доступны для чтения и передаются от родительского элмента к дочерниму",
  },
  {
    theme: "React",
    question: "Жизненный цикл",
    answer:
      "Состоит из 3 частей , монтирование - добавление элмента в дом , обновление - рендер при изменение состояния и размонтирование - удалени из дом",
  },
  {
    theme: "React",
    question: "Условный рендеринг",
    answer:
      "Это когда мы динамически добавляем или удаляем части кода(компоненты) при каких-либо условиях",
  },
  {
    theme: "React",
    question: "Передача данных",
    answer:
      "Когда мы множество раз передаем данные через props , то код засоряется, ухудшается производительность и возможность ошибок возрастает",
  },
  {
    theme: "JS",
    question: "Типы данных",
    answer:
      "Существует 8 типов данных - number , bigInt , string , object , symbol , boolean , null , undefined. Явное преобразование типов происходит с помощью функцй Number() , String().Невявное при сравнении через == ",
  },
  {
    theme: "JS",
    question: "hoisting",
    answer:
      "Когда приобращении к переменной мы поднимаемся по области видимости",
  },
  {
    theme: "JS",
    question: "Функции",
    answer:
      "Это обьекты в JS для написания какой-либо логики , Function Expression отличается , тем что нету собственного this , args и к такой функии нельзя обратиться до ее обьявления",
  },
  {
    theme: "JS",
    question: "Объекты",
    answer:
      "Тип данных в JS , для перечеслиния пар ключ-значени , ключом может быть только строка.This - ссылка на обьект , которая может относиться к глобальному обьекту , также модет быть передан функцией,либо методом , либо описан в самом обькте.Имеет методы call/apply/bind , call и apply вызывают функции и передают в нее новый контекст this , в apply можно передать массив , в то же время bind создает новую функцию и привязывает конкест к ней , затем ее можно вызвать",
  },
  {
    theme: "JS",
    question: "Массивы",
    answer: "Это упорядоченный набор элментов",
  },
  {
    theme: "JS",
    question:
      "Основы асинхронности: Callbacks, Promises (then, catch, finally), async/await",
    answer:
      "Callback - это функция, которая передаётся другой функции в качестве аргумента и выполняется после завершения какого-либо действия.Promise - используется для ассинхронных задач , это некое обещание , которое должно вернуть результат , либо вернуть значение , либо неудчное выполнение.",
  },
  {
    theme: "JS",
    question: "DOM Api",
    answer:
      "Это набор различных объектов, которые разработчик использует для чтения и изменения DOM с помощью JavaScript",
  },
  {
    theme: "JS",
    question: "ES6+ синтаксис",
    answer:
      "Деструктуризация - это когда мы элементы обьекта или массива извлекаем и присваевыем переменным к которым можем обратиться.Spread - оператор в JS , с помощью которого мы можем передавать элементы массива или обьекта в виде отдельных аргументов.Rest - оператор собирающий оставшиеся элменты массива или обьекта.Шаблонные строки в JavaScript — это особый вид строк, который позволяет встраивать значения переменных или выражений непосредственно внутрь строки",
  },
  {
    theme: "Инструменты",
    question: "Git",
    answer:
      "Это система управления версиями.Merge - создает новый коммит , который содержит изменения обоих веток , a rebase перемещает коммиты из коммиты из исходной ветки в целевую.",
  },
  {
    theme: "Инструменты",
    question: "NPM",
    answer:
      "Это менеджер пакетов для установки библиотек , управления зависимостей и редактирования метаданных.",
  },
  {
    theme: "Веб Технологии",
    question: "HTTP/HTTPS (что это, разница)",
    answer:
      "Это протокол передачи гипертекста , некий набор клиент-серверного взаимодействия , через него можно передать html css js , api и другие данные.HTTPS использует шифрование для при передачи данных.Статус коды 201 - запрос привел к созданию ресурса , 400 - оишбка на стороне клиента , 401 - неавторизованный запрос , 403 - запрос запрещен",
  },
  {
    theme: "Веб Технологии",
    question: "REST API",
    answer:
      "Архитектурый стиль API для регламинтированного и эффективного клиент-серверного взаимодействия , основными принципами считаются : многоуровневость , кэшируемость , отсутсвие состояния , единый интерфейс , каждый запрос делается как новый.",
  },
  {
    theme: "Веб Технологии",
    question: "JSON",
    answer:
      "Формат дынных построенный на базе JS , для обмена информации между различными источниками",
  },
  {
    theme: "Веб Технологии",
    question: "Что такое CORS",
    answer:
      "Это механизм безопасности в веб-разработке, который позволяет или запрещает веб-браузерам делать запросы на серверы",
  },
  {
    theme: "Веб Технологии",
    question: "Защита данных в JavaScript",
    answer:
      "Необходима для предотвращения различных угроз и уязвимостей, которые могут нарушить целостность и конфиденциальность чувствительных данных или рабочих процессов.",
  },
  {
    theme: "TypeScript",
    question: "Зачем нужен TypeScript? Основные преимущества",
    answer:
      "Нужен для улучшения качества кода , он добавляет статическую типизацию , которая помогает писать чистый и безопасный код.Основные преимущества - масштабируемость , обнаружения ошибок , улучшенное сопровождение кода",
  },
  {
    theme: "TypeScript",
    question: "Базовые типы",
    answer:
      "Any - любой тип , unkown - нужен когда тип вводимых данных неизвестен , чтобы затем выпонить привидение типа , он запрещает выполнять любые операции.Void представляет значение, возвращаемое функцией, которая ничего не возвращает",
  },
  {
    theme: "TypeScript",
    question: "Типизация массивов и объектов",
    answer:
      "Можно типизировать с помощью типа , интерфейса или встроенного типа",
  },
  {
    theme: "TypeScript",
    question: "Interface vs type (базовые различия и использование)",
    answer:
      "Интерфейсы не могут использоваться с примитивными типами , Интерфейсы с одинаковыми именами не должны быть объявлены в одной области видимости ,  Объединение типов может быть объявлено только с помощью ключевого слова type, а ключевое слово interface в данном контексте не применяется. Пересечение типов, напротив, создаётся с помощью оператора and",
  },
  {
    theme: "TypeScript",
    question: "Типизация функций",
    answer:
      "В функциях типизируются параметры , их типы прописываются после навзвания параметра.Также типизировать можно возвращаемое значение , прописывая тип после аргементов",
  },
  {
    theme: "TypeScript",
    question: "Что такое дженерикй",
    answer:
      "Это инструмент, который позволяет создавать компоненты, способные работать с различными типами данных, обеспечивая при этом строгую типизацию.Дженерики позволяют создавать универсальные функции, классы и интерфейсы, которые могут работать с различными типами данных.Использование дженериков позволяет избегать дублирования кода, создавая универсальные компоненты, которые можно использовать в различных контекстах. ",
  },
];
export default arrayTasks;
